---
- hosts: hypervisors
  tasks:
    - name: Create containers secrets
      include: tasks/create_container_secrets.yml
      loop: "{{ groups['containers'] }}"

- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Save containers variables
      meta: noop
    - name: Call add_host.py
      command: "./add_host.py --host {{ item }} '{{ hostvars[item] | hostvars_tojson }}'"
      loop: "{{ groups['containers'] }}"

- hosts: hypervisors
  tasks:
    - name: Setup hypervisor
      include: tasks/setup_hypervisor.yml

    - name: Get firewall facts
      set_fact:
        firewall_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        firewall_public_ip: "{{ hostvars[node].public_ip }}"
        firewall_gateway: "{{ hostvars[node].gateway }}"
        firewall_mac: "{{ hostvars[node].mac }}"
      when: hostvars[node].role == 'firewall'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Get reverse proxy facts
      set_fact:
        reverse_proxy_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        reverse_proxy_ctid: "{{ hostvars[node].ctid }}"
      when: hostvars[node].role == 'http'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Get mailinabox facts
      set_fact:
        miab_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        miab_ctid: "{{ hostvars[node].ctid }}"
      when: hostvars[node].role == 'miab'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Create containers
      include: tasks/create_container.yml
      loop: "{{ groups['containers'] }}"

    # - name: Create bind-mount for SSL certs
    #   command: "mount -o bind /var/containers/miab/home/user-data/ssl /var/containers/http/home/user-data/ssl"

    # - name: Create bind-mount for Let’s Encrypt challenges
    #   command: "mount -o bind /var/containers/miab/home/user-data/ssl/lets_encrypt/webroot /var/containers/http/var/letsencrypt/docroot"

    # - name: Create bind-mount for SSL certs
    #   # command: "mount -o bind /var/containers/miab/home/user-data/ssl /var/containers/http/home/user-data/ssl"
    #   mount:
    #     src: "/var/containers/miab/home/user-data/ssl"
    #     path: "/var/containers/http/home/user-data/ssl"
    #     opts: bind
    #     fstype: none
    #     state: mounted
    #     fstab: /dev/null

    # - name: Create bind-mount for Let’s Encrypt challenges
    #   # command: "mount -o bind /var/containers/miab/home/user-data/ssl/lets_encrypt/webroot /var/containers/http/var/letsencrypt/docroot"
    #   mount:
    #     src: "/var/containers/miab/home/user-data/ssl/lets_encrypt/webroot"
    #     path: "/var/containers/http/var/letsencrypt/docroot"
    #     opts: bind
    #     fstype: none
    #     state: mounted
    #     fstab: /dev/null

- hosts: containers
  tasks:
    - name: Get firewall facts
      set_fact:
        firewall_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        firewall_public_ip: "{{ hostvars[node].public_ip }}"
        firewall_gateway: "{{ hostvars[node].gateway }}"
        firewall_mac: "{{ hostvars[node].mac }}"
      when: hostvars[node].role == 'firewall'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Get reverse proxy facts
      set_fact:
        reverse_proxy_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        reverse_proxy_ctid: "{{ hostvars[node].ctid }}"
      when: hostvars[node].role == 'http'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Get mailinabox facts
      set_fact:
        miab_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        miab_ctid: "{{ hostvars[node].ctid }}"
      when: hostvars[node].role == 'miab'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Setup the containers system
      include_role:
        name: "{{ role }}"
        tasks_from: system

    - name: Finish the containers setup
      include_role:
        name: "{{ role }}"
        tasks_from: post-system

- hosts: backup
  tasks:
    - name: Setup backup account
      meta: noop
      loop: "{{ groups['containers'] }}"

- hosts: monitoring
  tasks:
    - name: Setup monitoring
      meta: noop
      loop: "{{ groups['containers'] }}"

# - name: Setup DNS
#   hosts: dns
#   tasks:
#     - name: Add DNS entries
#       meta: noop
#       loop: "{{ groups['containers'] }}"
#     - name: Provision certificate
#       meta: noop
#       loop: "{{ groups['containers'] }}"

# - name: Setup front server
#   hosts: http
#   tasks:
#     - name: Add virtualhost
#       meta: noop
#       loop: "{{ groups['containers'] }}"
#       notify: Reload HTTP server
#   handlers:
#     - name: Reload HTTP server
#       meta: noop
...
