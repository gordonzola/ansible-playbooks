---
- name: Install tzdata
  apk:
    name: tzdata

- name: Copy timezone data
  copy:
    src: "/usr/share/zoneinfo/{{ timezone }}"
    dest: /etc/localtime
    remote_src: yes

- name: Install nginx
  apk:
    name: nginx

- name: Install bash
  apk:
    name: bash
- name: Install openssl
  apk:
    name: openssl
- name: Hardening nginx
  include_role:
    name: dev-sec.nginx-hardening

- name: Create docroot
  file:
    path: /srv/www/default
    state: directory
    owner: nginx
    group: nginx

- name: Create default index page
  copy:
    src: "files/99.default.conf"
    dest: /etc/nginx/conf.d/99.default.conf
    remote_src: no

- name: Copy default index page
  copy:
    src: /var/lib/nginx/html/index.html
    dest: /srv/www/default/index.html
    owner: nginx
    group: nginx
    remote_src: yes

- name: Create Let's Encrypt challenge config
  template:
    src: "templates/letsencrypt.conf"
    dest: /etc/nginx/letsencrypt.conf

- name: Create global restrictions file
  copy:
    src: "files/restrictions.conf"
    dest: /etc/nginx/restrictions.conf
    remote_src: no

- name: Create Let's Encrypt challenge config 2
  template:
    src: "templates/00-letsencrypt.conf"
    dest: /etc/nginx/conf.d/00-letsencrypt.conf

- name: Get certs
  shell: "ls *.pem | grep -v ssl_private_key | sed 's/.pem//'"
  args:
    chdir: "/etc/ssl/letsencrypt"
  register: certs_found

- name: Delete config files for missing certs
  file:
    path: "/etc/nginx/conf.d/10.{{ item }}.conf"
    state: absent
  loop: "{{ groups['containers'] }}"
  when: "item not in certs_found.stdout.split()"

- name: Start nginx
  service:
    name: nginx
    state: started
    runlevel: default

- name: Make nginx run at boot
  command: "rc-update add nginx default"
  ignore_errors: yes

- name: Reload nginx config
  service:
    name: nginx
    state: reloaded

- name: Create SSL mountpoint
  file:
    path: /home/user-data/ssl/snippets
    state: directory
    recurse: yes

- name: Create SSL certs dir
  file:
    path: /etc/ssl/letsencrypt
    state: directory

- name: Copy copy-certs script
  copy:
    src: files/copy-certs.sh
    dest: /root/copy-certs.sh
    remote_src: no
    mode: 0700

- name: Create cron task for copy-certs
  cron:
    name: "Copy SSL certs"
    minute: "0"
    hour: "0,12"
    job: "bash /root/copy-certs.sh"

# - name: Create SSL challenges dir
#   file:
#     path: /var/letsencrypt/docroot
#     state: directory

# - name: Install nfs
#   apk:
#     name: nfs-utils

# - name: Install rpcbind
#   apk:
#     name: rpcbind

# - name: Set up NFS mounts
#   template:
#     src: templates/fstab
#     dest: /etc/fstab

...
