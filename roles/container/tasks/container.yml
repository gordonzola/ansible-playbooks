---

- name: Create bridge info
  set_fact:
    vlan_iface: "vmbr1.{{ vlan }}"
    ip: "10.0.{{ vlan }}.{{ ctid }}"

- name: Get reverse proxy IP
  set_fact:
    reverse_proxy_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
  when: hostvars[node].role == 'http'
  loop: "{{ groups['containers'] }}"
  loop_control:
    loop_var: node

- name: Create ZFS volume
  command: "zfs create -o encryption=on -o keyformat=passphrase {{ zfs_volume }}"
  args:
    stdin: "{{ passphrase }}"
    creates: "/{{ zfs_volume }}"

# - name: Mount ZFS volume
#   command: "zfs mount {{ zfs_volume }}"
#

- name: Check if storage exists
  shell: "pvesm status | grep root-{{ ctid }} | wc -l"
  register: storage_exists

- name: Create PVE storage
  command:
    cmd: "pvesm add zfspool root-{{ ctid }} --pool {{ zfs_volume }}"
  when: storage_exists.stdout == '0'

- name: Create ZFS disk volume
  command:
    cmd: "zfs create {{ zfs_volume }}/subvol-{{ ctid }}-disk-0"
    creates: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0"

- name: Create VLAN
  include: vlan.yml
  when: "vlan != '0'"

- name: Create container  # WARN: canâ€™t process CT update yet
  command:
    argv:
      - "pct"
      - "create"
      - "{{ ctid }}"
      - "local:vztmpl/{{ image }}"
      - "--cores={{ cpu_cores }}"
      - "--cpuunits={{ cpu_units }}"
      - "--hostname={{ main_domain }}"
      - "--memory={{ memory }}"
      - "--net0=name=eth0,bridge=vmbr1,firewall=1,gw=10.0.{{ vlan }}.1,ip=10.0.{{ vlan }}.{{ ctid }}/24{% if vlan != '0' %},tag={{ vlan }}{% endif %}"
      - "--onboot=0"
      - "--ostype={{ ostype }}"
      - "--rootfs=volume=root-{{ ctid }}:subvol-{{ ctid }}-disk-0,size={{ disk_size }}"
      - "--start=0"
      - "--swap={{ swap }}"
    creates: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/bin"


- name: Add firewall rules
  template:
    src: "{{ firewall_file }}"
    dest: "/root/tmp-{{ ctid }}.fw"
    owner: root

- name: Copy firewall rules
  # copy:
  #   remote_src: yes
  #   src: "/root/tmp/{{ ctid }}.fw"
  #   dest: "/etc/pve/firewall/{{ ctid }}.fw"
  command: "cp /root/tmp-{{ ctid }}.fw /etc/pve/firewall/{{ ctid }}.fw"

- name: Remove tmp file
  file:
    path: "/root/tmp-{{ ctid }}.fw"
    state: absent

- name: "Add port redirections"
  template:
    src: port_redir_up.j2
    dest: "/etc/network/ports.d/post-up/{{ port }}.conf"
  loop: "{{ redirected_ports }}"
  loop_control:
    loop_var: port

- name: "Add port redirections"
  template:
    src: port_redir_down.j2
    dest: "/etc/network/ports.d/post-down/{{ port }}.conf"
  loop: "{{ redirected_ports }}"
  loop_control:
    loop_var: port

- name: Enable port redirections
  iptables:
    table: nat
    chain: PREROUTING
    in_interface: vmbr0
    protocol: tcp
    destination_port: "{{ port }}"
    jump: DNAT
    to_destination: "10.0.{{ vlan }}.{{ ctid }}"
  loop: "{{ redirected_ports }}"
  loop_control:
    loop_var: port


- name: Get container state
  shell: "pct list | grep {{ ctid }} | awk '{print $2}'"
  register: container_running

- name: Start container
  command: "pct start {{ ctid }}"
  when: container_running.stdout == 'stopped'

- name: Update container packages
  command: "pct exec {{ ctid }} /sbin/apk update"
  when: "ostype == 'alpine'"

- name: Install Python3 in container
  command: "pct exec {{ ctid }} /sbin/apk add python3"
  when: "ostype == 'alpine'"

- name: Create public dir in container
  file:
    path: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/srv/public"
    state: directory
  when: role != 'http'

# - name: Mount public dir
#   mount:
#     src: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/srv/public"
#     path: "/{{ zfs_volumes[reverse_proxy.ctid].pool }}/subvol-{{ reverse_proxy.ctid }}-disk-0/srv/public/{{ ctid }}"
#     opts: bind
#     fstype: none
#     state: mounted
#   when: role != 'http'
...
