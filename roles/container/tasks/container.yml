---

- name: Create bridge info
  set_fact:
    vlan_iface: "vmbr1.{{ vlan }}"
    ip: "10.0.{{ vlan }}.{{ ctid }}"

- name: Create ZFS volume
  command: "zfs create -o encryption=on -o keyformat=passphrase {{ zfs_volume }}"
  args:
    stdin: "{{ passphrase }}"
    creates: "/{{ zfs_volume }}"

# - name: Mount ZFS volume
#   command: "zfs mount {{ zfs_volume }}"
#

- name: Check if storage exists
  shell: "pvesm status | grep root-{{ ctid }} | wc -l"
  register: storage_exists

- name: Create PVE storage
  command:
    cmd: "pvesm add zfspool root-{{ ctid }} --pool {{ zfs_volume }}"
  when: storage_exists.stdout == '0'

- name: Create snapshot mountpoint
  file:
    path: "/{{ zfs_volume }}/snapshot"
    state: directory

- name: Create ZFS disk volume
  command:
    cmd: "zfs create {{ zfs_volume }}/subvol-{{ ctid }}-disk-0"
    creates: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0"

- name: Create backups conf dir
  file:
    path: "/{{ zfs_volume }}/.backups"
    state: directory

- name: Copy backup SSH key
  copy:
    content: "{{ backup_ssh_key }}"
    dest: "/{{ zfs_volume }}/.backups/{{ item }}-backup"
    mode: "0600"

- name: Create Borg configuration
  template:
    src: "{{ borgmatic_config_file }}"
    dest: "/{{ zfs_volume }}/.backups/borgmatic.conf"

- name: Initiate backup
  command: "/usr/local/bin/borgmatic -c /{{ zfs_volume }}/.backups/borgmatic.conf init -e repokey"
  register: borgmatic_init

- name: Create snapshot cron task
  cron:
    name: "Snapshot for {{ item }}"
    minute: "{{ inventory_index }}"
    job: "bash -c \"/usr/sbin/zfs snapshot {{ zfs_volume }}/subvol-{{ ctid }}-disk-0@`date +\\%Y-\\%m-\\%d-\\%H-\\%M-\\%S`\""

- name: Create snapshot prune cron task
  cron:
    name: "Snapshot prune for {{ item }}"
    minute: "5"
    hour: "23"
    job: "bash -c \"/usr/sbin/zfs list -t snapshot -H -S creation -o name {{ zfs_volume }}/subvol-{{ ctid }}-disk-0 | tail -n +25 | xargs -L 1 /usr/sbin/zfs destroy\""

- name: Create backup cron task
  cron:
    name: "Backups for {{ item }}"
    minute: "10"
    hour: "{{ ( inventory_index|int ) + 2 }}"
    job: "/usr/local/bin/borgmatic -c /{{ zfs_volume }}/.backups/borgmatic.conf"

- name: Create container  # WARN: canâ€™t process CT update yet
  command:
    argv:
      - "pct"
      - "create"
      - "{{ ctid }}"
      - "local:vztmpl/{{ image }}"
      - "--cores={{ cpu_cores }}"
      - "--cpuunits={{ cpu_units }}"
      - "--hostname={{ main_domain }}"
      - "--memory={{ memory }}"
      - "{% if role == 'firewall' %}--net0=name=eth0,bridge=vmbr0,firewall=0,gw={{ firewall_gateway }},ip={{ firewall_public_ip }}/32,hwaddr={{ firewall_mac }}{% else %}--net0=name=eth0,bridge=vmbr1,firewall=1,gw={{ firewall_ip }},ip=10.0.{{ vlan }}.{{ ctid }}/24{% if vlan != '0' %},tag={{ vlan }}{% endif %}{% endif %}"
      - "{% if role == 'firewall' %}--net1=name=eth1,bridge=vmbr1,firewall=0,gw=10.0.{{ vlan }}.1,ip=10.0.0.{{ ctid }}/16{% else %}--console=1{% endif %}"
      - "--onboot=0"
      - "--ostype={{ ostype }}"
      - "--rootfs=volume=root-{{ ctid }}:subvol-{{ ctid }}-disk-0,size={{ disk_size }}"
      - "--start=0"
      - "--swap={{ swap }}"
      - "--features"
      - "mount=nfs,nesting=1"
    creates: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/bin"

- name: Copy CT conf file
  command: "cp /etc/pve/lxc/{{ ctid }}.conf /root/tmp-{{ ctid }}.conf"
  when: ostype == 'alpine'

# - name: Create mountpoint for front
#   blockinfile:
#     path: "/root/tmp-{{ ctid }}.conf"
#     block: |
#       mp0: /mnt/pve/,mp=/var/www/vhosts
#       mp1: /mnt/pve/nfs-ssl,mp=/home/user-data/ssl:
#     marker: "# {mark} ANSIBLE MANAGED BLOCK FRONT MOUNTPOINTS"
#   when: role == 'http'
#   register: 'mountpoints_changed'

# thanks to https://unix.stackovernet.com/fr/q/108786
- name: Fix pcap for alpine
  blockinfile:
    path: "/root/tmp-{{ ctid }}.conf"
    block: |
      # clear cap.drop 
      lxc.cap.drop: 

      # copy drop list from /usr/share/lxc/config/common.conf 
      lxc.cap.drop = mac_admin mac_override sys_time sys_module sys_rawio 

      # copy drop list from /usr/share/lxc/config/alpine.common.conf with setpcap commented 

      lxc.cap.drop = audit_write 
      lxc.cap.drop = ipc_owner 
      lxc.cap.drop = mknod 
      # lxc.cap.drop = setpcap 
      lxc.cap.drop = sys_nice 
      lxc.cap.drop = sys_pacct 
      lxc.cap.drop = sys_ptrace 
      lxc.cap.drop = sys_rawio 
      lxc.cap.drop = sys_resource 
      lxc.cap.drop = sys_tty_config 
      lxc.cap.drop = syslog 
      lxc.cap.drop = wake_alarm 

  when: ostype == 'alpine'

- name: Copy CT conf file back
  command: "cp /root/tmp-{{ ctid }}.conf /etc/pve/lxc/{{ ctid }}.conf"
  when: ostype == 'alpine'

- name: Remove tmp file
  file:
    path: "/root/tmp-{{ ctid }}.conf"
    state: absent
  when: ostype == 'alpine'

- name: Add firewall rules
  template:
    src: "{{ firewall_file }}"
    dest: "/root/tmp-{{ ctid }}.fw"
    owner: root
  when: role != 'firewall'

- name: Copy firewall rules
  # copy:
  #   remote_src: yes
  #   src: "/root/tmp/{{ ctid }}.fw"
  #   dest: "/etc/pve/firewall/{{ ctid }}.fw"
  command: "cp /root/tmp-{{ ctid }}.fw /etc/pve/firewall/{{ ctid }}.fw"
  when: role != 'firewall'

- name: Remove tmp file
  file:
    path: "/root/tmp-{{ ctid }}.fw"
    state: absent
  when: role != 'firewall'

- name: Get container state
  shell: "pct list | grep {{ ctid }} | awk '{print $2}'"
  register: container_running

- name: Start container
  command: "pct start {{ ctid }}"
  when: container_running.stdout == 'stopped'

- name: Update container packages
  command: "pct exec {{ ctid }} /sbin/apk update"
  when: "ostype == 'alpine'"

- name: Update container packages
  command: "pct exec {{ ctid }} /usr/bin/apt update"
  when: "ostype == 'ubuntu'"

- name: Install Python3 in container
  command: "pct exec {{ ctid }} /sbin/apk add python3"
  when: "ostype == 'alpine'"

- name: Install ssh in container
  command: "pct exec {{ ctid }} /sbin/apk add openssh"
  when: "ostype == 'alpine' and allow_ssh"

- name: Install ssh in container
  command: "pct exec {{ ctid }} -- /usr/bin/apt install -y openssh-server"
  when: "ostype == 'ubuntu' and allow_ssh"

- name: Start ssh in container
  command: "pct exec {{ ctid }} /etc/init.d/sshd start"
  when: "ostype == 'alpine' and allow_ssh"

- name: Enable ssh in container
  command: "pct exec {{ ctid }} rc-update add sshd default"
  when: "ostype == 'alpine' and allow_ssh"

- name: Create public dir in container
  file:
    path: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/srv/public"
    state: directory
  when: role != 'http'

- name: Create snippets subdir (for pvesm support)
  file:
    path: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/srv/public/snippets"
    state: directory
  when: role != 'http'
...
