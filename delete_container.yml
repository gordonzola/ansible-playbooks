---
- name: Remove monitoring config
  hosts: monitoring
  tasks:
    - name: "TODO: Do whatever is required"
      meta: noop

- hosts: hypervisors
  remote_user: root
  vars_prompt:
    - name: "host"
      prompt: "what is the container ID to delete"
      private: no

  tasks:

    - name: Create global host
      add_host:
        name: global
        global_host: "{{ host }}"

    - name: Get vault data
      set_fact:
        host_vars: "{{ hostvars | get(host) }}"

    - name: Get CTID
      set_fact:
        ctid: "{{ host_vars['ctid'] }}"

    - name: Check if CT still exists
      shell: "ls /etc/pve/nodes/{{ ansible_hostname }}/lxc/{{ ctid }}.conf | wc -l"
      register: config_exists

    - name: Get status of container
      command: "pct status {{ ctid }}"
      register: ct_status
      when: config_exists.stdout == '1'

    - name: Stop container
      command: "pct stop {{ ctid }}"
      when: "config_exists.stdout == '1' and 'status: running' in ct_status.stdout"

    - name: Delete HTTP config
      file:
        path: "/var/containers/http/etc/nginx/conf.d/10.{{ ctid }}.conf"
        state: absent
      when: host_vars.role != 'http'

    - name: Reload nginx
      command: "pct exec 100 /etc/init.d/nginx reload"
      ignore_errors: true
      when: host_vars.role != 'http'

    - name: Umount public dir
      debug:
        msg: TODO

    - name: Umount certs dir
      command: "umount /var/containers/http/home/user-data/ssl"
      ignore_errors: true
      when: host_vars.role in ('http', 'miab')

    - name: Umount challenges dir
      command: "umount /var/containers/http/var/letsencrypt/docroot"
      ignore_errors: true
      when: host_vars.role in ('http', 'miab')

    - name: Delete container
      command:
        cmd: "pct destroy {{ ctid }}"
        removes: "/etc/pve/nodes/{{ ansible_hostname }}/lxc/{{ ctid }}.conf"

    - name: Check if storage still exists
      shell: "pvesm status | grep root-{{ ctid }} | wc -l"
      register: storage_exists

    - name: Remove storage
      command: "pvesm remove root-{{ ctid }}"
      when: storage_exists.stdout == '1'

    - name: Remove ZFS volume
      command:
        cmd: "zfs destroy {{ host_vars['pool'] }}"
        removes: "/rpool/data/encrypted-{{ ctid }}"

    # - name: Remove firewall rules
    #   file:
    #     path: "/etc/pve/firewall/{{ ctid }}.fw"
    #     state: absent

    - name: Check if VLAN is unused
      shell: "grep -c 'tag-{{ host_vars['vlan'] }}' /etc/pve/lxc/* | grep -v ':0$' | echo -n"
      register: vlan_uses

    - name: Shutdown VLAN
      command: "ifdown vmbr1.{{ host_vars['vlan'] }}"
      when: "vlan_uses.stdout|int >= 1"

    - name: Remove VLAN
      file:
        path: "/etc/network/interfaces.d/vmbr1.{{ host_vars['vlan'] }}.conf"
        state: absent
      when: "vlan_uses.stdout|int >= 1"

    - name: Remove ports redirections
      shell: "grep -R {{ host }} /etc/network/ports.d/post-down | awk -F '{ print $1 }' | xargs bash; :"

    - name: Remove ports redirections configs
      shell: "grep -R {{ host }} /etc/network/ports.d/ | awk -F '{ print $1 }' | xargs rm; :"

    - name: Remove symlink
      file:
        path: "/var/containers/{{ host }}"
        state: absent

    - name: Remove role symlink
      file:
        path: "/var/containers/{{ host_vars.role }}"
        state: absent
      when: "host_vars.role in ('miab', 'http')"

- name: Remove backup account
  hosts: backup
  tasks:
    - name: Create new container user
      meta: noop

- name: Remove volume info in vault
  hosts: 127.0.0.1
  connection: local
  tasks:
    # - name: Test
    #   debug:
    #     msg: "hostname: {{ hostvars['new_host'] | hostvars_tojson }}"
    - name: Call remove_host.py
      # command: "./remove_host.py '{{ ctid }}'"
      file:
        path: "./host_vars/{{ hostvars['global'].global_host }}"

- name: Setup DNS
  hosts: dns
  tasks:
    - name: Remove DNS entries
      meta: noop

# - name: Setup front server
#   hosts: http
#   tasks:
#     - name: Remove virtualhost
#       meta: noop
#       notify: Reload HTTP server
#   handlers:
#     - name: Reload HTTP server
#       meta: noop
...


